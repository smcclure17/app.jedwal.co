/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as DemoTableRouteImport } from './routes/demo.table'
import { Route as ApiDemoTqTodosRouteImport } from './routes/api.demo-tq-todos'
import { Route as ApiDemoNamesRouteImport } from './routes/api.demo-names'
import { Route as DashboardAccountIdRouteImport } from './routes/_dashboard.$accountId'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'
import { Route as DemoSentryTestingRouteImport } from './routes/demo.sentry.testing'
import { Route as DashboardAccountIdPostsRouteImport } from './routes/_dashboard.$accountId.posts'
import { Route as DashboardAccountIdOrganizationsRouteImport } from './routes/_dashboard.$accountId.organizations'
import { Route as DashboardAccountIdApisRouteImport } from './routes/_dashboard.$accountId.apis'
import { Route as DashboardAccountIdPostsPostIdRouteImport } from './routes/_dashboard.$accountId.posts.$postId'
import { Route as DashboardAccountIdOrganizationsCreateRouteImport } from './routes/_dashboard.$accountId.organizations.create'
import { Route as DashboardAccountIdApisApiIdRouteImport } from './routes/_dashboard.$accountId.apis.$apiId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoTqTodosRoute = ApiDemoTqTodosRouteImport.update({
  id: '/api/demo-tq-todos',
  path: '/api/demo-tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoNamesRoute = ApiDemoNamesRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardAccountIdRoute = DashboardAccountIdRouteImport.update({
  id: '/_dashboard/$accountId',
  path: '/$accountId',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoSentryTestingRoute = DemoSentryTestingRouteImport.update({
  id: '/demo/sentry/testing',
  path: '/demo/sentry/testing',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardAccountIdPostsRoute = DashboardAccountIdPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => DashboardAccountIdRoute,
} as any)
const DashboardAccountIdOrganizationsRoute =
  DashboardAccountIdOrganizationsRouteImport.update({
    id: '/organizations',
    path: '/organizations',
    getParentRoute: () => DashboardAccountIdRoute,
  } as any)
const DashboardAccountIdApisRoute = DashboardAccountIdApisRouteImport.update({
  id: '/apis',
  path: '/apis',
  getParentRoute: () => DashboardAccountIdRoute,
} as any)
const DashboardAccountIdPostsPostIdRoute =
  DashboardAccountIdPostsPostIdRouteImport.update({
    id: '/$postId',
    path: '/$postId',
    getParentRoute: () => DashboardAccountIdPostsRoute,
  } as any)
const DashboardAccountIdOrganizationsCreateRoute =
  DashboardAccountIdOrganizationsCreateRouteImport.update({
    id: '/create',
    path: '/create',
    getParentRoute: () => DashboardAccountIdOrganizationsRoute,
  } as any)
const DashboardAccountIdApisApiIdRoute =
  DashboardAccountIdApisApiIdRouteImport.update({
    id: '/$apiId',
    path: '/$apiId',
    getParentRoute: () => DashboardAccountIdApisRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/$accountId': typeof DashboardAccountIdRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/$accountId/apis': typeof DashboardAccountIdApisRouteWithChildren
  '/$accountId/organizations': typeof DashboardAccountIdOrganizationsRouteWithChildren
  '/$accountId/posts': typeof DashboardAccountIdPostsRouteWithChildren
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/$accountId/apis/$apiId': typeof DashboardAccountIdApisApiIdRoute
  '/$accountId/organizations/create': typeof DashboardAccountIdOrganizationsCreateRoute
  '/$accountId/posts/$postId': typeof DashboardAccountIdPostsPostIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/$accountId': typeof DashboardAccountIdRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/$accountId/apis': typeof DashboardAccountIdApisRouteWithChildren
  '/$accountId/organizations': typeof DashboardAccountIdOrganizationsRouteWithChildren
  '/$accountId/posts': typeof DashboardAccountIdPostsRouteWithChildren
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/$accountId/apis/$apiId': typeof DashboardAccountIdApisApiIdRoute
  '/$accountId/organizations/create': typeof DashboardAccountIdOrganizationsCreateRoute
  '/$accountId/posts/$postId': typeof DashboardAccountIdPostsPostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/_dashboard/$accountId': typeof DashboardAccountIdRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_dashboard/$accountId/apis': typeof DashboardAccountIdApisRouteWithChildren
  '/_dashboard/$accountId/organizations': typeof DashboardAccountIdOrganizationsRouteWithChildren
  '/_dashboard/$accountId/posts': typeof DashboardAccountIdPostsRouteWithChildren
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/_dashboard/$accountId/apis/$apiId': typeof DashboardAccountIdApisApiIdRoute
  '/_dashboard/$accountId/organizations/create': typeof DashboardAccountIdOrganizationsCreateRoute
  '/_dashboard/$accountId/posts/$postId': typeof DashboardAccountIdPostsPostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/$accountId'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/$accountId/apis'
    | '/$accountId/organizations'
    | '/$accountId/posts'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/$accountId/apis/$apiId'
    | '/$accountId/organizations/create'
    | '/$accountId/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/$accountId'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/$accountId/apis'
    | '/$accountId/organizations'
    | '/$accountId/posts'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/$accountId/apis/$apiId'
    | '/$accountId/organizations/create'
    | '/$accountId/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/_dashboard/$accountId'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/_dashboard/$accountId/apis'
    | '/_dashboard/$accountId/organizations'
    | '/_dashboard/$accountId/posts'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/_dashboard/$accountId/apis/$apiId'
    | '/_dashboard/$accountId/organizations/create'
    | '/_dashboard/$accountId/posts/$postId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  DashboardAccountIdRoute: typeof DashboardAccountIdRouteWithChildren
  ApiDemoNamesRoute: typeof ApiDemoNamesRoute
  ApiDemoTqTodosRoute: typeof ApiDemoTqTodosRoute
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoSentryTestingRoute: typeof DemoSentryTestingRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-tq-todos': {
      id: '/api/demo-tq-todos'
      path: '/api/demo-tq-todos'
      fullPath: '/api/demo-tq-todos'
      preLoaderRoute: typeof ApiDemoTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/$accountId': {
      id: '/_dashboard/$accountId'
      path: '/$accountId'
      fullPath: '/$accountId'
      preLoaderRoute: typeof DashboardAccountIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/sentry/testing': {
      id: '/demo/sentry/testing'
      path: '/demo/sentry/testing'
      fullPath: '/demo/sentry/testing'
      preLoaderRoute: typeof DemoSentryTestingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/$accountId/posts': {
      id: '/_dashboard/$accountId/posts'
      path: '/posts'
      fullPath: '/$accountId/posts'
      preLoaderRoute: typeof DashboardAccountIdPostsRouteImport
      parentRoute: typeof DashboardAccountIdRoute
    }
    '/_dashboard/$accountId/organizations': {
      id: '/_dashboard/$accountId/organizations'
      path: '/organizations'
      fullPath: '/$accountId/organizations'
      preLoaderRoute: typeof DashboardAccountIdOrganizationsRouteImport
      parentRoute: typeof DashboardAccountIdRoute
    }
    '/_dashboard/$accountId/apis': {
      id: '/_dashboard/$accountId/apis'
      path: '/apis'
      fullPath: '/$accountId/apis'
      preLoaderRoute: typeof DashboardAccountIdApisRouteImport
      parentRoute: typeof DashboardAccountIdRoute
    }
    '/_dashboard/$accountId/posts/$postId': {
      id: '/_dashboard/$accountId/posts/$postId'
      path: '/$postId'
      fullPath: '/$accountId/posts/$postId'
      preLoaderRoute: typeof DashboardAccountIdPostsPostIdRouteImport
      parentRoute: typeof DashboardAccountIdPostsRoute
    }
    '/_dashboard/$accountId/organizations/create': {
      id: '/_dashboard/$accountId/organizations/create'
      path: '/create'
      fullPath: '/$accountId/organizations/create'
      preLoaderRoute: typeof DashboardAccountIdOrganizationsCreateRouteImport
      parentRoute: typeof DashboardAccountIdOrganizationsRoute
    }
    '/_dashboard/$accountId/apis/$apiId': {
      id: '/_dashboard/$accountId/apis/$apiId'
      path: '/$apiId'
      fullPath: '/$accountId/apis/$apiId'
      preLoaderRoute: typeof DashboardAccountIdApisApiIdRouteImport
      parentRoute: typeof DashboardAccountIdApisRoute
    }
  }
}

interface DashboardAccountIdApisRouteChildren {
  DashboardAccountIdApisApiIdRoute: typeof DashboardAccountIdApisApiIdRoute
}

const DashboardAccountIdApisRouteChildren: DashboardAccountIdApisRouteChildren =
  {
    DashboardAccountIdApisApiIdRoute: DashboardAccountIdApisApiIdRoute,
  }

const DashboardAccountIdApisRouteWithChildren =
  DashboardAccountIdApisRoute._addFileChildren(
    DashboardAccountIdApisRouteChildren,
  )

interface DashboardAccountIdOrganizationsRouteChildren {
  DashboardAccountIdOrganizationsCreateRoute: typeof DashboardAccountIdOrganizationsCreateRoute
}

const DashboardAccountIdOrganizationsRouteChildren: DashboardAccountIdOrganizationsRouteChildren =
  {
    DashboardAccountIdOrganizationsCreateRoute:
      DashboardAccountIdOrganizationsCreateRoute,
  }

const DashboardAccountIdOrganizationsRouteWithChildren =
  DashboardAccountIdOrganizationsRoute._addFileChildren(
    DashboardAccountIdOrganizationsRouteChildren,
  )

interface DashboardAccountIdPostsRouteChildren {
  DashboardAccountIdPostsPostIdRoute: typeof DashboardAccountIdPostsPostIdRoute
}

const DashboardAccountIdPostsRouteChildren: DashboardAccountIdPostsRouteChildren =
  {
    DashboardAccountIdPostsPostIdRoute: DashboardAccountIdPostsPostIdRoute,
  }

const DashboardAccountIdPostsRouteWithChildren =
  DashboardAccountIdPostsRoute._addFileChildren(
    DashboardAccountIdPostsRouteChildren,
  )

interface DashboardAccountIdRouteChildren {
  DashboardAccountIdApisRoute: typeof DashboardAccountIdApisRouteWithChildren
  DashboardAccountIdOrganizationsRoute: typeof DashboardAccountIdOrganizationsRouteWithChildren
  DashboardAccountIdPostsRoute: typeof DashboardAccountIdPostsRouteWithChildren
}

const DashboardAccountIdRouteChildren: DashboardAccountIdRouteChildren = {
  DashboardAccountIdApisRoute: DashboardAccountIdApisRouteWithChildren,
  DashboardAccountIdOrganizationsRoute:
    DashboardAccountIdOrganizationsRouteWithChildren,
  DashboardAccountIdPostsRoute: DashboardAccountIdPostsRouteWithChildren,
}

const DashboardAccountIdRouteWithChildren =
  DashboardAccountIdRoute._addFileChildren(DashboardAccountIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  DashboardAccountIdRoute: DashboardAccountIdRouteWithChildren,
  ApiDemoNamesRoute: ApiDemoNamesRoute,
  ApiDemoTqTodosRoute: ApiDemoTqTodosRoute,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoSentryTestingRoute: DemoSentryTestingRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
