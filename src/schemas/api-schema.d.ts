/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login
         * @description Start the OAuth login flow with Google.
         *     Redirects to Google for authentication.
         */
        get: operations["login_login_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Auth
         * @description Handle the OAuth callback from Google.
         *     Stores user information in the session.
         */
        get: operations["auth_auth_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Logout
         * @description Log out the user by clearing their session.
         */
        get: operations["logout_logout_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-picker-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Token */
        get: operations["get_token_google_picker_token_get"];
        put?: never;
        /** Save Token */
        post: operations["save_token_google_picker_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get-account-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Data
         * @description Get information about the currently authenticated user.
         *
         *     Returns:
         *         UserDataResponse: User profile and account information
         */
        get: operations["get_account_data_get_account_data_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Unsubscribe
         * @description Unsubscribe a user from emails.
         *
         *     Args:
         *         user_id: The ID of the user to unsubscribe
         *         email: The email address to unsubscribe (used if user_id is not provided)
         *         redirect: If True, redirect to a confirmation page; otherwise return JSON
         *
         *     Returns:
         *         JSON response or redirect to confirmation page
         */
        get: operations["unsubscribe_unsubscribe_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{owner_id}/{sheet_api_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Sheet V2 */
        get: operations["read_sheet_v2_api__owner_id___sheet_api_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get-all-sheets/{owner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sheets Metadata V2
         * @description Get all sheets owned by the current user (personal sheets only).
         */
        get: operations["get_sheets_metadata_v2_get_all_sheets__owner_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Api V2 */
        post: operations["create_api_v2_api_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delete-api/{owner_id}/{sheet_api_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Api V2 */
        delete: operations["delete_api_v2_delete_api__owner_id___sheet_api_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/update-cache-duration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Cache Duration V2 */
        post: operations["update_cache_duration_v2_update_cache_duration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/create-organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Organization
         * @description Create a new organization.
         *     The current user will automatically be added as an admin of the organization.
         *
         *     Args:
         *         name: The name of the organization
         *
         *     Returns:
         *         OrganizationResponse: The newly created organization
         */
        post: operations["create_organization_create_organization_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invite-users-to-organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invite Users */
        post: operations["invite_users_invite_users_to_organization_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/{org_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Organization
         * @description Delete an organization.
         *     This will delete the organization, all its memberships and sheets.
         *     Only organization admins can delete an organization.
         *
         *     Args:
         *         org_id: The ID of the organization to delete
         *
         *     Returns:
         *         dict: Confirmation message
         */
        delete: operations["delete_organization_organization__org_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get-api-invocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sheet Invocations
         * @description Get API invocation logs for a specific sheet.
         *
         *     Args:
         *         api_name: Name of the API
         *         start_time: ISO-8601 formatted start time for log retrieval
         *
         *     Returns:
         *         List of invocation logs
         */
        get: operations["get_sheet_invocations_get_api_invocations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get-api-invocations-total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sheet Invocations Total
         * @description Get the total count of API invocations for a specific sheet.
         *
         *     Args:
         *         sheet_api_id: ID of the API
         *
         *     Returns:
         *         Total count of invocations
         */
        get: operations["get_sheet_invocations_total_get_api_invocations_total_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Webhook Received
         * @description Handle Stripe webhook events.
         *
         *     Processes events such as:
         *     - checkout.session.completed: Upgrade user to premium
         *     - customer.subscription.deleted: Downgrade user from premium
         *
         *     Args:
         *         request: The request object containing the webhook payload
         *         stripe_signature: Stripe signature for verifying the webhook
         *
         *     Returns:
         *         dict: Status response
         */
        post: operations["webhook_received_stripe_webhook_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/create-checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Checkout Session */
        post: operations["create_checkout_session_create_checkout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Homepage
         * @description Render simple homepage
         */
        get: operations["homepage__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc/{owner_id}/{api_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Doc */
        get: operations["get_doc_doc__owner_id___api_name__get"];
        put?: never;
        post?: never;
        /** Delete Doc */
        delete: operations["delete_doc_doc__owner_id___api_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Doc */
        post: operations["create_doc_doc_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs/metadata/{owner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Apis Metadata
         * @description Get all sheets owned by the current user (personal sheets only).
         */
        get: operations["get_apis_metadata_docs_metadata__owner_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs/{owner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Public Apis
         * @description Get all sheets owned by the current user (personal sheets only).
         */
        get: operations["get_public_apis_docs__owner_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Content
         * @description Publish/update the google doc content to your API
         */
        post: operations["update_content_doc_publish_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc/add-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Category */
        post: operations["add_category_doc_add_category_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc/delete-category/{owner_id}/{api_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Add Category */
        delete: operations["add_category_doc_delete_category__owner_id___api_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc/update-slug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Doc Slug */
        post: operations["update_doc_slug_doc_update_slug_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc/add-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Webhook */
        post: operations["add_webhook_doc_add_webhook_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doc/delete-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Webhook */
        delete: operations["delete_webhook_doc_delete_webhook_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AddCategoryToDocRequest
         * @description Request model for adding category to a Doc API
         */
        AddCategoryToDocRequest: {
            /** Owner Id */
            owner_id: string;
            /** Api Name */
            api_name: string;
            /** Category */
            category: string;
        };
        /** AddWebhookToDocApiRequest */
        AddWebhookToDocApiRequest: {
            /** Owner Id */
            owner_id: string;
            /** Api Name */
            api_name: string;
            webhook: components["schemas"]["WebhookIntegrationRequestObject"];
        };
        /** ApiInvocationResponse */
        ApiInvocationResponse: {
            /** Sheet Api Id */
            sheet_api_id: string;
            /** Path */
            path: string;
            /** Timestamp */
            timestamp: string;
            /** Status Code */
            status_code: number;
        };
        /** Body_create_api_v2_api_post */
        Body_create_api_v2_api_post: {
            /** Google Id */
            google_id: string;
            /** Owner Id */
            owner_id?: string | null;
        };
        /** Body_create_doc_doc_post */
        Body_create_doc_doc_post: {
            /** Google Id */
            google_id: string;
            /** Owner Id */
            owner_id?: string | null;
        };
        /** Body_invite_users_invite_users_to_organization_post */
        Body_invite_users_invite_users_to_organization_post: {
            /** Org Id */
            org_id: string;
            /** User Emails */
            user_emails: string[];
        };
        /** Body_save_token_google_picker_token_post */
        Body_save_token_google_picker_token_post: {
            /** Token */
            token: unknown;
            /** Expires In */
            expires_in: unknown;
        };
        /** CreateDocResponse */
        CreateDocResponse: {
            /** Url */
            url: string;
            /** Post Id */
            post_id: string;
        };
        /**
         * CreateOrganizationRequest
         * @description Request model for creating an organization
         */
        CreateOrganizationRequest: {
            /** Name */
            name: string;
            /** Invitees */
            invitees: string[];
        };
        /** DeleteWebhookToDocApiRequest */
        DeleteWebhookToDocApiRequest: {
            /** Owner Id */
            owner_id: string;
            /** Api Name */
            api_name: string;
            /** Url */
            url: string;
        };
        /** DocApiContentResponse */
        DocApiContentResponse: {
            /** Content */
            content: string;
            /** Title */
            title: string;
            /** Published At */
            published_at?: string | null;
            /** Creator */
            creator?: string | null;
        };
        /** DocApiResponse */
        DocApiResponse: {
            /** Doc Api Name */
            doc_api_name: string;
            /** Owner Id */
            owner_id: string;
            /** Google Doc Id */
            google_doc_id: string;
            /**
             * Frozen
             * @default false
             */
            frozen: boolean;
            /** Created At */
            created_at: string;
            /** Title */
            title: string;
            /** Last Modified */
            last_modified: string;
            /** Categories */
            categories?: string[] | null;
            /** Slug */
            slug?: string | null;
            /** Webhooks */
            webhooks: components["schemas"]["WebhookIntegration"][] | null;
        };
        /** DocsMetadataResponse */
        DocsMetadataResponse: {
            /** Apis */
            apis: components["schemas"]["DocApiResponse"][];
        };
        /** GetAllSheetsResponse */
        GetAllSheetsResponse: {
            /** Results */
            results: components["schemas"]["SheetMetadata"][];
            /** Failures */
            failures: components["schemas"]["SheetMetadataFailure"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * OrganizationResponse
         * @description Response model for organization data
         */
        OrganizationResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Created At */
            created_at: string;
            /** Created By */
            created_by: string;
        };
        /**
         * PublishDocApiRequest
         * @description Update Doc API content to match Google Doc
         */
        PublishDocApiRequest: {
            /** Owner Id */
            owner_id: string;
            /** Api Name */
            api_name: string;
        };
        /**
         * SheetMetadata
         * @description Public-facing API response model for sheet metadata
         */
        SheetMetadata: {
            /** Sheet Api Name */
            sheet_api_name: string;
            /** Owner Id */
            owner_id: string;
            /** Created At */
            created_at: string;
            /** Spreadsheet Title */
            spreadsheet_title: string;
            /** Google Sheet Id */
            google_sheet_id: string;
            /** Cache Duration */
            cache_duration: number;
            /**
             * Frozen
             * @default false
             */
            frozen: boolean;
            /**
             * Worksheets
             * @default []
             */
            worksheets: string[];
        };
        /** SheetMetadataFailure */
        SheetMetadataFailure: {
            /** Sheet Api Name */
            sheet_api_name: string;
            /** Google Sheet Id */
            google_sheet_id: string;
            /** Hint */
            hint: string;
        };
        /**
         * UpdateApiTtlRequest
         * @description Request model for updating API TTL
         */
        UpdateApiTtlRequest: {
            /** Owner Id */
            owner_id: string;
            /** Api Name */
            api_name: string;
            /**
             * Cache Duration
             * @description Cache duration in seconds, minimum 1 second
             */
            cache_duration: number;
        };
        /**
         * UpdateApiTtlResponse
         * @description Response model for updating API TTL
         */
        UpdateApiTtlResponse: {
            /** Message */
            message: string;
        };
        /**
         * UpdateDocApiSlugRequest
         * @description Request model for changing the slug for a Doc API
         */
        UpdateDocApiSlugRequest: {
            /** Owner Id */
            owner_id: string;
            /** Api Name */
            api_name: string;
            /** Slug */
            slug: string;
        };
        /**
         * UserDataResponse
         * @description Public-facing API response model for user data
         */
        UserDataResponse: {
            /** Id */
            id: string;
            /**
             * Account Status
             * @enum {string}
             */
            account_status: "free" | "premium";
            /** Display Name */
            display_name: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Orgs */
            orgs: unknown[];
            /**
             * Type
             * @enum {string}
             */
            type: "user" | "organization";
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WebhookIntegration */
        WebhookIntegration: {
            /** Url */
            url: string;
            /**
             * Method
             * @enum {string}
             */
            method: "GET" | "POST";
            /** Payload */
            payload: {
                [key: string]: unknown;
            };
            /** Name */
            name?: string | null;
        };
        /**
         * WebhookIntegrationRequestObject
         * @example {
         *       "method": "POST",
         *       "payload": {
         *         "event": "site.republished",
         *         "timestamp": "2024-01-01T00:00:00Z"
         *       },
         *       "url": "https://api.example.com/webhooks"
         *     }
         */
        WebhookIntegrationRequestObject: {
            /** Url */
            url: string;
            /**
             * Method
             * @enum {string}
             */
            method: "GET" | "POST";
            /**
             * Payload
             * @default {}
             */
            payload: {
                [key: string]: unknown;
            };
            /** Name */
            name?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login_login_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    auth_auth_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    logout_logout_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_token_google_picker_token_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    save_token_google_picker_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_save_token_google_picker_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_account_data_get_account_data_get: {
        parameters: {
            query?: {
                account_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDataResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unsubscribe_unsubscribe_get: {
        parameters: {
            query: {
                user_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_sheet_v2_api__owner_id___sheet_api_name__get: {
        parameters: {
            query?: {
                worksheet?: string;
            };
            header?: never;
            path: {
                owner_id: string;
                sheet_api_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sheets_metadata_v2_get_all_sheets__owner_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllSheetsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_api_v2_api_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_create_api_v2_api_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_api_v2_delete_api__owner_id___sheet_api_name__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
                sheet_api_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_cache_duration_v2_update_cache_duration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateApiTtlRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateApiTtlResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_organization_create_organization_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    invite_users_invite_users_to_organization_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_invite_users_invite_users_to_organization_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_organization_organization__org_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sheet_invocations_get_api_invocations_get: {
        parameters: {
            query: {
                account_id: string;
                sheet_api_name: string;
                start_time: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiInvocationResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sheet_invocations_total_get_api_invocations_total_get: {
        parameters: {
            query: {
                account_id: string;
                sheet_api_name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    webhook_received_stripe_webhook_post: {
        parameters: {
            query?: never;
            header?: {
                "stripe-signature"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_checkout_session_create_checkout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    homepage__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    get_doc_doc__owner_id___api_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
                api_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocApiContentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_doc_doc__owner_id___api_name__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
                api_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_doc_doc_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_create_doc_doc_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDocResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_apis_metadata_docs_metadata__owner_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocsMetadataResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_public_apis_docs__owner_id__get: {
        parameters: {
            query?: {
                categories?: string | null;
            };
            header?: never;
            path: {
                owner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_content_doc_publish_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublishDocApiRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_category_doc_add_category_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCategoryToDocRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_category_doc_delete_category__owner_id___api_name__delete: {
        parameters: {
            query: {
                category: string;
            };
            header?: never;
            path: {
                owner_id: string;
                api_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_doc_slug_doc_update_slug_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDocApiSlugRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_webhook_doc_add_webhook_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddWebhookToDocApiRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_webhook_doc_delete_webhook_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteWebhookToDocApiRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
